//
//  ListaProfessorView.swift
//  Projeto
//
//  Created by Turma01-27 on 13/05/25.
//

import SwiftUI
import GoogleGenerativeAI

struct DiscProfSheetView: View {
    @StateObject var viewModel = ViewModel()
    @Binding var disc: Disciplina
    let model = GenerativeModel(name: "gemini-1.5-flash-latest", apiKey: APIKey.default)
    @State var textInput = ""
    @ObservedObject var aiResponse = GlobalData.compartilhado
    var body: some View {
        ZStack{
            Color.azulP
            ScrollView{
                VStack{
                    Text("\(disc.nome!)")
                        .font(.system(size: 25))
                        .bold()
                    HStack{
                        Text("\(disc.data.first!)")
                            .font(.system(size: 20))
                    }
                    HStack{
                        Text("Assunto:")
                            .font(.system(size: 20))
                    }
                    HStack{
                        VStack {
                            HStack{
                                TextField("Assunto", text: $textInput)
                                    .textFieldStyle(.roundedBorder)
                                    .foregroundStyle(.white)
                                    .frame(width: 250)
                                
                                Button {
                                    sendMessage()
                                } label: {
                                    Image(systemName: "paperplane.fill")
                                        .foregroundColor(.black)
                                }
                               
                            }
                            Text(aiResponse.response)
                                .padding(.horizontal)
                                .multilineTextAlignment(.center)
                        }
                    }
                    Spacer()
                }}
            .presentationDetents([.height(550)])
            .padding(.top, 50)
        }
        .onAppear(){
            viewModel.fetchDisc()
        }
    }
    func sendMessage() {
            // 1. Validação
            guard !textInput.isEmpty else {
                aiResponse.response = "Digite o tema da aula antes de enviar!"
                return
            }
            
            // 2. Mostra estado de carregamento
            aiResponse.response = "Gerando resumo..."
            
            Task {
                do {
                    // 3. Usa o prompt template com o tema
                    let promptFinal = viewModel.gerarPromptGemini(tema: textInput)
                    
                    // 4. Chama o Gemini
                    let response = try await model.generateContent(promptFinal)
                    
                    // 5. Atualiza a UI
                    DispatchQueue.main.async {
                        aiResponse.response = response.text ?? "Resposta inválida"
                        textInput = "" // Limpa o campo
                    }
                    
                } catch {
                    DispatchQueue.main.async {
                        aiResponse.response = "Erro: \(error.localizedDescription)"
                    }
                }
            }
        }
}


struct ListaProfessorView: View {
    @StateObject var viewModel = ViewModel()
    @State private var showingSheet = false
    @State private var selectedDisc = Disciplina(professor: "", nome: "", data: [""], idDisc: 0)
    
    @ObservedObject var aiResponse = GlobalData.compartilhado
    
    var body: some View {
        ZStack{
            Color.azulP
                .ignoresSafeArea()
            VStack{
                ScrollView{
                    HStack{
                        Text("Disciplinas:")
                            .padding()
                            .bold()
                            .font(.system(size: 25))
                        Spacer()
                    }
                    if let firstDisc = viewModel.disc.first {
                        Button {
                            selectedDisc = firstDisc
                            showingSheet.toggle()
                        } label: {
                            ZStack{
                                Rectangle()
                                    .frame(width: 335, height: 50)
                                    .cornerRadius(10)
                                    .foregroundColor(.white)
                                VStack{
                                    HStack{
                                        Text("\(firstDisc.nome!)")
                                            .font(.system(size: 18))
                                            .padding(.leading, 35)
                                        Spacer()
                                    }
                                }
                            }.accentColor(.black)
                            
                        }
                        }
                    }
                }
            }.onAppear(){
                viewModel.fetchDisc()
            }
            .sheet(isPresented: $showingSheet) {
                DiscProfSheetView(disc: $selectedDisc, aiResponse: aiResponse)
            }
    }
}

#Preview {
    ListaProfessorView()
}
