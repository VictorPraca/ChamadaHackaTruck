//
//  HomeProfessorView.swift
//  Projeto
//
//  Created by Turma01-27 on 13/05/25.
//

import SwiftUI
import GoogleGenerativeAI

struct AlunoSheetView: View {
    @StateObject var viewModel = ViewModel()
    @Binding var aluno: Aluno
    let model = GenerativeModel(name: "gemini-1.5-flash-latest", apiKey: "YOUR_API_KEY")
    var body: some View {
        ZStack{
            Color.azulP
            VStack{
                    Image(systemName: "person.circle.fill")
                        .foregroundColor(.gray)
                        .font(.system(size: 120))
                    Text("\(aluno.nome!)")
                        .font(.system(size: 25))
                        .bold()
                    HStack{
                        Text("MatrÃ­cula: \(aluno.matricula!)")
                            .font(.system(size: 20))
                    }
                    HStack{
                        Text("Faltas: \(aluno.faltas!)")
                            .font(.system(size: 20))
                    }
                Spacer()
            }
            .presentationDetents([.height(550)])
            .padding(.top, 50)
        }
        .onAppear(){
            viewModel.fetchDisc()
            viewModel.fetchpresenca()
            viewModel.fetchAluno()
        }
    }
}


struct HomeProfessorView: View {
    @State private var showingSheet = false
    @State private var selectedAluno = Aluno(nome: "", matricula: "", faltas: 0, idDisc: [])
    @StateObject var viewModel = ViewModel()
    var currentDateString:String{
        let formatter = DateFormatter()
        formatter.dateFormat = "dd/MM/yyyy"
        return formatter.string(from: Date())
    }
    var body: some View {
        ZStack{
            Color.azulP
                .ignoresSafeArea()
            ScrollView{
            VStack{
                VStack{
                    
                    ForEach(viewModel.disc, id: \.self){ c in
                        ForEach(c.data.filter({$0 == currentDateString}), id: \.self){ d in
                            HStack{
                                Text("\(c.nome!)")
                                    .font(.system(size: 30))
                                    .bold()
                                Spacer()
                            }
                            .padding(.leading)
//                  Data
                            HStack{
                                if c.data.count > 0 {
                                    Text("\(c.data.first!)")
                                        .font(.system(size: 23))
                                }
                                Spacer()
                            }
                            .padding(.leading)

                        }
                    }
                }
                HStack{
                    Text("Alunos:")
                        .padding()
                        .bold()
                        .font(.system(size: 25))
                    Spacer()
                }
                ForEach(viewModel.aluno, id: \.self){ a in
                        Button {
                            selectedAluno = a
                            showingSheet.toggle()
                        } label: {
                            ZStack{
                                Rectangle()
                                    .frame(width: 335, height: 50)
                                    .cornerRadius(10)
                                    .foregroundColor(.white)
                                VStack{
                                    HStack{
                                        Text("\(a.nome!)")
                                            .font(.system(size: 18))
                                            .padding(.leading, 35)
                                        
                                        if a.nome == "Efraim Costa"{
                                            if(viewModel.pres() == nil){
                                                Circle()
                                                    .frame(width: 10)
                                                    .foregroundStyle(.gray)
                                                    
                                            }else if(viewModel.pres() == true){
                                                Circle()
                                                    .frame(width: 10)
                                                    .foregroundStyle(.green)
                                            }else{
                                                Circle()
                                                    .frame(width: 10)
                                                    .foregroundStyle(.red)
                                            }
                                        }
                                        else{
                                            Circle()
                                                .frame(width: 10)
                                                .foregroundStyle(.gray)
                                        }
                                        Spacer()
                                    }
                                }
                                
                            }
                        }.accentColor(.black)
                            .padding(.bottom, 10)
                        
                    }
                }
//            }
                Spacer()
            }.sheet(isPresented: $showingSheet ) {
               
                    AlunoSheetView(aluno: $selectedAluno)
                
            }
            .onAppear(){
                viewModel.fetchDisc()
                viewModel.fetchpresenca()
                viewModel.fetchAluno()
            }
        }
    }
}


#Preview {
    HomeProfessorView()
}
